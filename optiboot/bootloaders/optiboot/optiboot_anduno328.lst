
optiboot_anduno328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .stab         00000aec  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000091d  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000164d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	14 be       	out	0x34, r1	; 52
    7e0c:	98 e0       	ldi	r25, 0x08	; 8
    7e0e:	9d b9       	out	0x0d, r25	; 13
    7e10:	9e b9       	out	0x0e, r25	; 14
    7e12:	98 2f       	mov	r25, r24
    7e14:	9d 70       	andi	r25, 0x0D	; 13
    7e16:	09 f0       	breq	.+2      	; 0x7e1a <main+0x1a>
    7e18:	d3 d0       	rcall	.+422    	; 0x7fc0 <appStart>
    7e1a:	85 e0       	ldi	r24, 0x05	; 5
    7e1c:	80 93 81 00 	sts	0x0081, r24
    7e20:	82 e0       	ldi	r24, 0x02	; 2
    7e22:	80 93 c0 00 	sts	0x00C0, r24
    7e26:	88 e1       	ldi	r24, 0x18	; 24
    7e28:	80 93 c1 00 	sts	0x00C1, r24
    7e2c:	86 e0       	ldi	r24, 0x06	; 6
    7e2e:	80 93 c2 00 	sts	0x00C2, r24
    7e32:	80 e1       	ldi	r24, 0x10	; 16
    7e34:	80 93 c4 00 	sts	0x00C4, r24
    7e38:	8e e0       	ldi	r24, 0x0E	; 14
    7e3a:	ad d0       	rcall	.+346    	; 0x7f96 <watchdogConfig>
    7e3c:	25 9a       	sbi	0x04, 5	; 4
    7e3e:	26 e0       	ldi	r18, 0x06	; 6
    7e40:	80 e3       	ldi	r24, 0x30	; 48
    7e42:	9c ef       	ldi	r25, 0xFC	; 252
    7e44:	31 e0       	ldi	r19, 0x01	; 1
    7e46:	90 93 85 00 	sts	0x0085, r25
    7e4a:	80 93 84 00 	sts	0x0084, r24
    7e4e:	36 bb       	out	0x16, r19	; 22
    7e50:	b0 9b       	sbis	0x16, 0	; 22
    7e52:	fe cf       	rjmp	.-4      	; 0x7e50 <main+0x50>
    7e54:	1d 9a       	sbi	0x03, 5	; 3
    7e56:	a8 95       	wdr
    7e58:	21 50       	subi	r18, 0x01	; 1
    7e5a:	a9 f7       	brne	.-22     	; 0x7e46 <main+0x46>
    7e5c:	81 2c       	mov	r8, r1
    7e5e:	91 2c       	mov	r9, r1
    7e60:	93 e0       	ldi	r25, 0x03	; 3
    7e62:	f9 2e       	mov	r15, r25
    7e64:	ee 24       	eor	r14, r14
    7e66:	e3 94       	inc	r14
    7e68:	25 e0       	ldi	r18, 0x05	; 5
    7e6a:	d2 2e       	mov	r13, r18
    7e6c:	31 e1       	ldi	r19, 0x11	; 17
    7e6e:	c3 2e       	mov	r12, r19
    7e70:	86 d0       	rcall	.+268    	; 0x7f7e <getch>
    7e72:	81 34       	cpi	r24, 0x41	; 65
    7e74:	79 f4       	brne	.+30     	; 0x7e94 <main+0x94>
    7e76:	83 d0       	rcall	.+262    	; 0x7f7e <getch>
    7e78:	89 83       	std	Y+1, r24	; 0x01
    7e7a:	93 d0       	rcall	.+294    	; 0x7fa2 <verifySpace>
    7e7c:	89 81       	ldd	r24, Y+1	; 0x01
    7e7e:	82 38       	cpi	r24, 0x82	; 130
    7e80:	11 f4       	brne	.+4      	; 0x7e86 <main+0x86>
    7e82:	82 e0       	ldi	r24, 0x02	; 2
    7e84:	05 c0       	rjmp	.+10     	; 0x7e90 <main+0x90>
    7e86:	81 38       	cpi	r24, 0x81	; 129
    7e88:	11 f4       	brne	.+4      	; 0x7e8e <main+0x8e>
    7e8a:	86 e0       	ldi	r24, 0x06	; 6
    7e8c:	01 c0       	rjmp	.+2      	; 0x7e90 <main+0x90>
    7e8e:	83 e0       	ldi	r24, 0x03	; 3
    7e90:	6f d0       	rcall	.+222    	; 0x7f70 <putch>
    7e92:	6b c0       	rjmp	.+214    	; 0x7f6a <main+0x16a>
    7e94:	82 34       	cpi	r24, 0x42	; 66
    7e96:	11 f4       	brne	.+4      	; 0x7e9c <main+0x9c>
    7e98:	84 e1       	ldi	r24, 0x14	; 20
    7e9a:	03 c0       	rjmp	.+6      	; 0x7ea2 <main+0xa2>
    7e9c:	85 34       	cpi	r24, 0x45	; 69
    7e9e:	19 f4       	brne	.+6      	; 0x7ea6 <main+0xa6>
    7ea0:	85 e0       	ldi	r24, 0x05	; 5
    7ea2:	87 d0       	rcall	.+270    	; 0x7fb2 <getNch>
    7ea4:	62 c0       	rjmp	.+196    	; 0x7f6a <main+0x16a>
    7ea6:	85 35       	cpi	r24, 0x55	; 85
    7ea8:	41 f4       	brne	.+16     	; 0x7eba <main+0xba>
    7eaa:	69 d0       	rcall	.+210    	; 0x7f7e <getch>
    7eac:	88 2e       	mov	r8, r24
    7eae:	67 d0       	rcall	.+206    	; 0x7f7e <getch>
    7eb0:	91 2c       	mov	r9, r1
    7eb2:	98 2a       	or	r9, r24
    7eb4:	88 0c       	add	r8, r8
    7eb6:	99 1c       	adc	r9, r9
    7eb8:	57 c0       	rjmp	.+174    	; 0x7f68 <main+0x168>
    7eba:	86 35       	cpi	r24, 0x56	; 86
    7ebc:	21 f4       	brne	.+8      	; 0x7ec6 <main+0xc6>
    7ebe:	84 e0       	ldi	r24, 0x04	; 4
    7ec0:	78 d0       	rcall	.+240    	; 0x7fb2 <getNch>
    7ec2:	80 e0       	ldi	r24, 0x00	; 0
    7ec4:	e5 cf       	rjmp	.-54     	; 0x7e90 <main+0x90>
    7ec6:	84 36       	cpi	r24, 0x64	; 100
    7ec8:	09 f0       	breq	.+2      	; 0x7ecc <main+0xcc>
    7eca:	32 c0       	rjmp	.+100    	; 0x7f30 <main+0x130>
    7ecc:	58 d0       	rcall	.+176    	; 0x7f7e <getch>
    7ece:	57 d0       	rcall	.+174    	; 0x7f7e <getch>
    7ed0:	b8 2e       	mov	r11, r24
    7ed2:	55 d0       	rcall	.+170    	; 0x7f7e <getch>
    7ed4:	a8 2e       	mov	r10, r24
    7ed6:	00 e0       	ldi	r16, 0x00	; 0
    7ed8:	11 e0       	ldi	r17, 0x01	; 1
    7eda:	51 d0       	rcall	.+162    	; 0x7f7e <getch>
    7edc:	f8 01       	movw	r30, r16
    7ede:	81 93       	st	Z+, r24
    7ee0:	8f 01       	movw	r16, r30
    7ee2:	be 12       	cpse	r11, r30
    7ee4:	fa cf       	rjmp	.-12     	; 0x7eda <main+0xda>
    7ee6:	5d d0       	rcall	.+186    	; 0x7fa2 <verifySpace>
    7ee8:	f5 e4       	ldi	r31, 0x45	; 69
    7eea:	af 12       	cpse	r10, r31
    7eec:	01 c0       	rjmp	.+2      	; 0x7ef0 <main+0xf0>
    7eee:	ff cf       	rjmp	.-2      	; 0x7eee <main+0xee>
    7ef0:	f4 01       	movw	r30, r8
    7ef2:	f7 be       	out	0x37, r15	; 55
    7ef4:	e8 95       	spm
    7ef6:	07 b6       	in	r0, 0x37	; 55
    7ef8:	00 fc       	sbrc	r0, 0
    7efa:	fd cf       	rjmp	.-6      	; 0x7ef6 <main+0xf6>
    7efc:	f4 01       	movw	r30, r8
    7efe:	a0 e0       	ldi	r26, 0x00	; 0
    7f00:	b1 e0       	ldi	r27, 0x01	; 1
    7f02:	2c 91       	ld	r18, X
    7f04:	11 96       	adiw	r26, 0x01	; 1
    7f06:	8c 91       	ld	r24, X
    7f08:	11 97       	sbiw	r26, 0x01	; 1
    7f0a:	30 e0       	ldi	r19, 0x00	; 0
    7f0c:	38 2b       	or	r19, r24
    7f0e:	12 96       	adiw	r26, 0x02	; 2
    7f10:	09 01       	movw	r0, r18
    7f12:	e7 be       	out	0x37, r14	; 55
    7f14:	e8 95       	spm
    7f16:	11 24       	eor	r1, r1
    7f18:	32 96       	adiw	r30, 0x02	; 2
    7f1a:	ba 12       	cpse	r11, r26
    7f1c:	f2 cf       	rjmp	.-28     	; 0x7f02 <main+0x102>
    7f1e:	f4 01       	movw	r30, r8
    7f20:	d7 be       	out	0x37, r13	; 55
    7f22:	e8 95       	spm
    7f24:	07 b6       	in	r0, 0x37	; 55
    7f26:	00 fc       	sbrc	r0, 0
    7f28:	fd cf       	rjmp	.-6      	; 0x7f24 <main+0x124>
    7f2a:	c7 be       	out	0x37, r12	; 55
    7f2c:	e8 95       	spm
    7f2e:	1d c0       	rjmp	.+58     	; 0x7f6a <main+0x16a>
    7f30:	84 37       	cpi	r24, 0x74	; 116
    7f32:	69 f4       	brne	.+26     	; 0x7f4e <main+0x14e>
    7f34:	24 d0       	rcall	.+72     	; 0x7f7e <getch>
    7f36:	23 d0       	rcall	.+70     	; 0x7f7e <getch>
    7f38:	b8 2e       	mov	r11, r24
    7f3a:	21 d0       	rcall	.+66     	; 0x7f7e <getch>
    7f3c:	32 d0       	rcall	.+100    	; 0x7fa2 <verifySpace>
    7f3e:	84 01       	movw	r16, r8
    7f40:	f8 01       	movw	r30, r16
    7f42:	85 91       	lpm	r24, Z+
    7f44:	8f 01       	movw	r16, r30
    7f46:	14 d0       	rcall	.+40     	; 0x7f70 <putch>
    7f48:	ba 94       	dec	r11
    7f4a:	d1 f7       	brne	.-12     	; 0x7f40 <main+0x140>
    7f4c:	0e c0       	rjmp	.+28     	; 0x7f6a <main+0x16a>
    7f4e:	85 37       	cpi	r24, 0x75	; 117
    7f50:	39 f4       	brne	.+14     	; 0x7f60 <main+0x160>
    7f52:	27 d0       	rcall	.+78     	; 0x7fa2 <verifySpace>
    7f54:	8e e1       	ldi	r24, 0x1E	; 30
    7f56:	0c d0       	rcall	.+24     	; 0x7f70 <putch>
    7f58:	85 e9       	ldi	r24, 0x95	; 149
    7f5a:	0a d0       	rcall	.+20     	; 0x7f70 <putch>
    7f5c:	8f e0       	ldi	r24, 0x0F	; 15
    7f5e:	98 cf       	rjmp	.-208    	; 0x7e90 <main+0x90>
    7f60:	81 35       	cpi	r24, 0x51	; 81
    7f62:	11 f4       	brne	.+4      	; 0x7f68 <main+0x168>
    7f64:	88 e0       	ldi	r24, 0x08	; 8
    7f66:	17 d0       	rcall	.+46     	; 0x7f96 <watchdogConfig>
    7f68:	1c d0       	rcall	.+56     	; 0x7fa2 <verifySpace>
    7f6a:	80 e1       	ldi	r24, 0x10	; 16
    7f6c:	01 d0       	rcall	.+2      	; 0x7f70 <putch>
    7f6e:	80 cf       	rjmp	.-256    	; 0x7e70 <main+0x70>

00007f70 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f70:	90 91 c0 00 	lds	r25, 0x00C0
    7f74:	95 ff       	sbrs	r25, 5
    7f76:	fc cf       	rjmp	.-8      	; 0x7f70 <putch>
  UART_UDR = ch;
    7f78:	80 93 c6 00 	sts	0x00C6, r24
    7f7c:	08 95       	ret

00007f7e <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f7e:	80 91 c0 00 	lds	r24, 0x00C0
    7f82:	87 ff       	sbrs	r24, 7
    7f84:	fc cf       	rjmp	.-8      	; 0x7f7e <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f86:	80 91 c0 00 	lds	r24, 0x00C0
    7f8a:	84 fd       	sbrc	r24, 4
    7f8c:	01 c0       	rjmp	.+2      	; 0x7f90 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f8e:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f90:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f94:	08 95       	ret

00007f96 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f96:	e0 e6       	ldi	r30, 0x60	; 96
    7f98:	f0 e0       	ldi	r31, 0x00	; 0
    7f9a:	98 e1       	ldi	r25, 0x18	; 24
    7f9c:	90 83       	st	Z, r25
  WDTCSR = x;
    7f9e:	80 83       	st	Z, r24
    7fa0:	08 95       	ret

00007fa2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fa2:	ed df       	rcall	.-38     	; 0x7f7e <getch>
    7fa4:	80 32       	cpi	r24, 0x20	; 32
    7fa6:	19 f0       	breq	.+6      	; 0x7fae <verifySpace+0xc>
    7fa8:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7faa:	f5 df       	rcall	.-22     	; 0x7f96 <watchdogConfig>
    7fac:	ff cf       	rjmp	.-2      	; 0x7fac <verifySpace+0xa>
    7fae:	84 e1       	ldi	r24, 0x14	; 20
    7fb0:	df cf       	rjmp	.-66     	; 0x7f70 <putch>

00007fb2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fb2:	cf 93       	push	r28
    7fb4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fb6:	e3 df       	rcall	.-58     	; 0x7f7e <getch>
    7fb8:	c1 50       	subi	r28, 0x01	; 1
    7fba:	e9 f7       	brne	.-6      	; 0x7fb6 <getNch+0x4>
    7fbc:	cf 91       	pop	r28
  verifySpace();
}
    7fbe:	f1 cf       	rjmp	.-30     	; 0x7fa2 <verifySpace>

00007fc0 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fc0:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fc2:	80 e0       	ldi	r24, 0x00	; 0
    7fc4:	e8 df       	rcall	.-48     	; 0x7f96 <watchdogConfig>
    7fc6:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fc8:	ff 27       	eor	r31, r31
    7fca:	09 94       	ijmp
